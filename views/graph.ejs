<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JS Serial Plotter</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"
    />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <% if(display == "console") { %>
    <link
      href="https://fonts.googleapis.com/css2?family=Fira+Mono:wght@500&display=swap"
      rel="stylesheet"
    />
    <% } %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js"
      integrity="sha512-WIklPM6qPCIp6d3fSSr90j+1unQHUOoWDS4sdTiR8gxUTnyZ8S2Mr8e10sKKJ/bhJgpAa/qG068RDkg6fIlNFA=="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/socket.io-client@2/dist/socket.io.js"></script>
    <link rel="stylesheet" href="/styles/style.css" />
  </head>
  <body>
    <header>
      <h1>JS Serial Plotter</h1>
    </header>
    <div class="container">
      <% if(display == "graph") { %>
      <div id="chart"></div>
      <div id="controls">
        <button disabled class="material-icons control" id="start">
          play_arrow
        </button>
        <button class="material-icons control" id="stop">pause</button>
        <button class="material-icons control" id="save">file_download</button>
      </div>
      <% } %> <% if(display == "console") { %>
      <textarea placeholder="@>Log..." id="log" rows="10" cols="100"></textarea>
      <div id="wrapper">
        <input type="text" id="command" placeholder="Befehl..." />
        <input type="button" id="send" value="senden" />
      </div>
      <% } %>
      <button type="submit" id="close">schlie√üen</button>
    </div>
    <script>
      const port = "<%= port %>";
      const baud = parseInt("<%= baud %>");

      let socket = io(window.location.origin);

      // close active connection
      let closeBtn = document.getElementById("close");

      // console controls
      let logTxt = document.getElementById("log");
      let sendBtn = document.getElementById("send");
      let cmdTxt = document.getElementById("command");

      <% if (display == "graph") { %>
      // controls for the graph
      let stopBtn = document.getElementById("stop");
      let startBtn = document.getElementById("start");
      let saveBtn = document.getElementById("save");
      let chart = document.getElementById("chart");

      let y = [];
      let active = 1;

      function download_csv(data) {
        var link = document.createElement("a");
        link.setAttribute(
          "href",
          `data:text/plain;charset=utf-8,Data\n${encodeURIComponent(
            data.join("\n")
          )}`
        );
        link.setAttribute("download", `js_serial.csv`);

        link.style.display = "none";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
      <% } %>

      <% if(display == "console") { %>
        let lines = [];
      <% } %>


      function setup() {
        <% if (display == "graph") { %>
          let canv = createCanvas(chart.offsetWidth - 10, 512);
          canv.parent("chart");
          textSize(16);
        <% } %>
        socket.emit("open", { port, baud });
      }
      <% if(display == "graph") { %>
      function windowResized() {
        resizeCanvas(chart.offsetWidth - 10, 512);
      }
      <% } %>
      closeBtn.addEventListener("click", () => {
        socket.emit("close", { port, baud });
        socket.close();
        window.location.href = window.location.origin;
      });

      <% if (display == "graph") { %>
        stopBtn.addEventListener("click", () => {
          active = active ^ 1;
          startBtn.disabled = false;
          stopBtn.disabled = true;
        });

        startBtn.addEventListener("click", () => {
          active = active ^ 1;
          startBtn.disabled = true;
          stopBtn.disabled = false;
        });

        saveBtn.addEventListener("click", () => {
          download_csv(y);
        });
      <% } %>

      <% if (display == "console") { %>
        sendBtn.addEventListener("click", () => {
          if(cmdTxt.value != "") {
            const command = cmdTxt.value + "\n";
            cmdTxt.value = "";
            socket.emit("command", { command });
          }
        });

        cmdTxt.addEventListener("keyup", e => {
          if(e.keyCode === 13) {
            e.preventDefault();
            sendBtn.click();
          }
        });
      <% } %>

      socket.on("data", (data) => {
        <% if (display == "graph") { %>
          if (active === 1) {
            if (y.length < 512) {
              y.push(parseFloat(data.value) | 0);
            } else {
              y.shift();
              y[511] = (parseFloat(data.value) | 0);
            }

            let max = Math.max(...y) | 1;
            let min = Math.min(...y) | 0;

            let max_y = parseInt(1.25 * max);
            let min_y = parseInt(0.75 * min);

            let span = max_y - min_y;

            background(255);

            stroke(0);
            fill(0);
            text(`${max_y}`, 0, 20);
            text(`${min_y}`, 0, height - 4);

            noFill();
            beginShape();
            y.forEach((e, i) => {
              vertex((i * width) / 512, height - ((e - min_y) / span) * height);
            });
            endShape();
          }
        <% } %>

        <% if (display == "console") { %>
          if(lines.length < 32) {
            lines.push("> " + data.value + "\n");
          } else {
            lines.shift();
            lines[31] = "> " + data.value + "\n";
          }
          logTxt.innerHTML = lines.join("");
          logTxt.scrollTop = logTxt.scrollHeight;
        <% } %>
      });
    </script>
  </body>
</html>
